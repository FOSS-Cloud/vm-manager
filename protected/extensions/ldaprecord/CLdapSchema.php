<?php
/*
 * Copyright (C) 2012 FOSS-Group
 *                    Germany
 *                    http://www.foss-group.de
 *                    support@foss-group.de
 *
 * Authors:
 *  Christian Wittkowski <wittkowski@devroom.de>
 *
 * Licensed under the EUPL, Version 1.1 or â€“ as soon they
 * will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the
 * Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://www.osor.eu/eupl
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 *
 *
 */

/**
 * CLdapSchema class file.
 *
 * @author: Christian Wittkowski <wittkowski@devroom.de>
 * @version: 0.4
 */

/**
 * CLadpSchema
 *
 * CLdapSchema holds all the defined object classes and attribute definitions.
 *
 *
 * @author Christian Wittkowski <wittkowski@devroom.de>
 * @version $Id: $
 * @package ext.ldaprecord
 * @since 0.4
 */
final class CLdapSchema {
	/**
	 * @var array of CLdapObjectClass.
	 */
	private $_objectClasses = array();
	/**
	 * @var array of CLdapAttributeType.
	 */
	private $_attributeTypes = array();

	public function __construct() {
	}

	/**
	 * Returns the object class by name
	 *
	 * @param String $name the name of the object class
	 * @return CLdapObjectClass the object class or null if not found
	 */
	public function getObjectClass($name) {
		if (isset($this->_objectClasses[$name])) {
			return $this->_objectClasses[$name];
		}
		return null;
	}

	/**
	 * Adds a object class to the container
	 *
	 * @return void
	 * @since 0.6
	 */
	public function addObjectClass($name, $objclass) {
		$this->_objectClasses[$name] = $objclass;
	}

	/*
	 * Returns the hole object class container
	 *
	 * @return array CLdapObjectClass
	 * @since 0.6
	 */
	public function getAllObjectClasses() {
		return $this->_objectClasses;
	}

	/**
	 * Returns the attribute type by name
	 *
	 * @param String $name the name of the attribute type
	 * @return CLdapAttributeType the attribute type or null if not found
	 */
	public function getAttributeType($name) {
		$name = strtolower($name);
		if (array_key_exists($name, $this->_attributeTypes)) {
			return $this->_attributeTypes[$name];
		}
		return null;
	}

	/**
	 * Adds a attribute type to the container
	 *
	 * @return void
	 * @since 0.6
	 */
	public function addAttributeType($name, $type) {
		$this->_attributeTypes[$name] = $type;
	}

	/*
	 * Returns the hole attribute type container
	 *
	 * @return array CLdapAttributeType
	 * @since 0.6
	 */
	public function getAllAttributeTypes() {
		return $this->_attributeTypes;
	}

	public function writeCache() {
		$fp = fopen(dirname(__FILE__).DIRECTORY_SEPARATOR.'Schema.cache', 'w');
		fwrite($fp, <<<EOS
<?php
/*
 * Don't edit this file!!
 *
 * Generated by CLdapSchema class
 *
 */

EOS
);
		fwrite($fp, '$attrTypes = array();' . "\n");
		foreach($this->_attributeTypes as $aname => $attrtype) {
			fwrite($fp, '$attrTypes[\'' . $aname . '\']=\'' . implode(',', $attrtype->getNames()) . '\';' . "\n");
		}

		fwrite($fp, '$objClasses = array();' . "\n");
		foreach($this->_objectClasses as $oname => $objclass) {
			fwrite($fp, '$objClasses[\'' . $oname . '\']=array(\'attrs\' => array(' . "\n");
			foreach($objclass->getAttributes() as $aname => $attr) {
				fwrite($fp, '\'' . $aname . '\'=>array(\'mandatory\'=>' . ($attr['mandatory'] ? 'true' : 'false') . ',\'type\'=>\'' . $attr['type'] . '\'),' . "\n");
			}
			fwrite($fp, '));' . "\n");
		}
		fwrite($fp, '?>');
		fclose($fp);
	}

	public function readCache() {
		if(file_exists(dirname(__FILE__).DIRECTORY_SEPARATOR.'Schema.cache')) {
			include(dirname(__FILE__).DIRECTORY_SEPARATOR.'Schema.cache');
			echo 'count attr: ' . count($attrTypes) . '<br/>';
			echo 'count obj: ' . count($objClasses) . '<br/>';
		}
	}
}
